javascript:(async()=>{const load=(u)=>new Promise(r=>{const s=document.createElement('script');s.src=u;s.onload=r;document.head.appendChild(s)});await load('https://cdn.jsdelivr.net/npm/jszip@3.10.1/dist/jszip.min.js');await load('https://cdn.jsdelivr.net/npm/file-saver@2.0.5/dist/FileSaver.min.js');const pick=(...sels)=>{for(const sel of sels){const el=document.querySelector(sel);if(el)return el}return null};const article=pick('body div.article-body > div.fr-view.article-content','div.article-body .article-content','article .article-content','main .article-content','main article');if(!article){alert('본문을 찾지 못했습니다. 사이트 구조가 바뀌었을 수 있어요.');return}const title=(document.querySelector('.article-title, h1.title, h1')?.textContent||document.title||'arcalive').trim().replace(/[\\/:*?"<>|]+/g,'_');const base=document.location.origin;const clone=article.cloneNode(true);clone.querySelectorAll('script,style').forEach(n=>n.remove());clone.querySelectorAll('[contenteditable]').forEach(n=>n.removeAttribute('contenteditable'));const imgs=[...clone.querySelectorAll('img')];imgs.forEach((img,i)=>{const n=`images/img_${String(i+1).padStart(3,'0')}`;const ext=(img.src.split('?')[0].split('#')[0].match(/\.(jpe?g|png|gif|webp|avif|bmp|svg)$/i)||['','.jpg'])[1];img.setAttribute('data-zip-path',`${n}.${ext||'jpg'}`);img.removeAttribute('srcset');img.removeAttribute('crossorigin');img.setAttribute('src',img.getAttribute('data-src')||img.getAttribute('data-original')||img.src)});const styles=`<meta charset="utf-8"/><meta name="viewport" content="width=device-width,initial-scale=1"><title>${title}</title><style>body{font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Apple SD Gothic Neo,Noto Sans KR,Helvetica,Arial,sans-serif;line-height:1.6;padding:2rem;max-width:820px;margin:0 auto;word-break:break-word}img{max-width:100%;height:auto}</style>`;const html=`<!doctype html><html><head>${styles}</head><body><h1>${title}</h1>${clone.outerHTML}</body></html>`;const zip=new JSZip();zip.file('index.html',html);const toAbs=u=>{try{const a=new URL(u,document.baseURI);return a.href}catch{return u}};const fetchAsArrayBuffer=async(u)=>{const res=await fetch(u,{credentials:'include'});if(!res.ok)throw new Error('HTTP '+res.status);return await res.arrayBuffer()};let downloaded=0;for(const img of imgs){const path=img.getAttribute('data-zip-path');const url=toAbs(img.getAttribute('src'));try{const buf=await fetchAsArrayBuffer(url);zip.file(path,buf);img.setAttribute('src',path);downloaded++}catch(e){console.warn('이미지 다운로드 실패:',url,e)}}zip.file('README.txt',`Saved from: ${document.location.href}\nTitle: ${title}\nSaved at: ${new Date().toISOString()}\nImages saved: ${downloaded}/${imgs.length}\n`);const out=await zip.generateAsync({type:'blob'});saveAs(out,`${title}.zip`);})();